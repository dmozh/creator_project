[/requirements.txt]
cryptography
aiohttp
aiohttp_session
gunicorn
#pyodbc
#psycopg2
[/requirements.txt]

[/entry.py]
from aiohttp import web
import argparse
from app import create_app
parser = argparse.ArgumentParser(description="aiohttp server example")
parser.add_argument('--path')
parser.add_argument('--port')
app = create_app()
if __name__ == '__main__':
    args = parser.parse_args()
    print(args.path, args.port)
    web.run_app(app, path=args.path, port=args.port)
[/entry.py]

[/credentials.py]
#this file uses for creds to project
#its need add to git ignore
[/credentials.py]

[/utils.py]
#this file have util function
from urllib.parse import unquote
import json


def get_params(url: str):
    """
    Get params from url
    :param url: str url
    :return: dict all params
    """
    params = {}
    symbols = ['{',
               '}',
               '[',
               ']',
               '(',
               ')',
               "'",
               '"',
               '`',
               '~',
               ',',
               ';',
               ':',
               '.',
               '<',
               '>',
               '!',
               '?']

    def replacing(param_value: str):
        param_value = unquote(param_value)
        for symbol in symbols:
            param_value = param_value.replace("symb", "")
        return param_value

    query_string = url.split('?')[1]
    params_list = query_string.split("&")
    for item in params_list:
        key, value = item.split('=')
        params[key] = replacing(value)

    return params


def replace_screen_symbols(text: str):
    """
    Function replacing all special symbols from text
    :param text: text
    :return: reformat text
    """
    symbols = {'&nbsp;': ' ', '&pound;': '£', '&euro;': '€', '&para;': '¶', '&sect;': '§', '&copy;': '©', '&reg;': '®',
               '&trade;': '™',
               '&deg;': '°', '&plusmn;': '±', '&frac14;': '¼', '&frac12;': '½', '&frac34;': '¾', '&times;': '×',
               '&divide;': '÷', '&fnof;': 'ƒ', '&Alpha;': 'Α', '&Beta;': 'Β', '&Gamma;': 'Γ', '&Delta;': 'Δ',
               '&Epsilon;': 'Ε', '&Zeta;': 'Ζ', '&Eta;': 'Η', '&Theta;': 'Θ', '&Iota;': 'Ι', '&Kappa;': 'Κ',
               '&Lambda;': 'Λ', '&Mu;': 'Μ', '&Nu;': 'Ν', '&Xi;': 'Ξ', '&Omicron;': 'Ο', '&Pi;': 'Π', '&Rho;': 'Ρ',
               '&Sigma;': 'Σ', '&Tau;': 'Τ', '&Upsilon;': 'Υ', '&Phi;': 'Φ', '&Chi;': 'Χ', '&Psi;': 'Ψ', '&Omega;': 'Ω',
               '&alpha;': 'α', '&beta;': 'β', '&gamma;': 'γ', '&delta;': 'δ', '&epsilon;': 'ε', '&zeta;': 'ζ',
               '&eta;': 'η', '&theta;': 'θ', '&iota;': 'ι', '&kappa;': 'κ', '&lambda;': 'λ', '&mu;': 'μ', '&nu;': 'ν',
               '&xi;': 'ξ', '&omicron;': 'ο', '&pi;': 'π', '&rho;': 'ρ', '&sigmaf;': 'ς', '&sigma;': 'σ', '&tau;': 'τ',
               '&upsilon;': 'υ', '&phi;': 'φ', '&chi;': 'χ', '&psi;': 'ψ', '&omega;': 'ω', '&larr;': '←', '&uarr;': '↑',
               '&rarr;': '→', '&darr;': '↓', '&harr;': '↔', '&spades;': '♠', '&clubs;': '♣', '&hearts;': '♥', '&diams;':
                   '♦', '&quot;': '"', '&amp;': '&', '&lt;': '<', '&gt;': '>', '&hellip;': '…', '&prime;': '′',
               '&Prime;': '″', '&ndash;': '–', '&mdash;': '—', '&lsquo;': '‘', '&rsquo;': '’', '&sbquo;': '‚',
               '&ldquo;': '“', '&rdquo;': '”', '&bdquo;': '„', '&laquo;': '«', '&raquo;': '»'}
    for key, value in symbols.items():
        text = text.replace(key, value)
    return text
[/utils.py]

[/app/__init__.py]
from .app import create_app
[/app/__init__.py]

[/app/app.py]
import base64
from cryptography import fernet
from aiohttp import web
from aiohttp_session import setup, get_session, session_middleware
from aiohttp_session.cookie_storage import EncryptedCookieStorage
from .routes import setup_routes

#simple create app
async def create_app():
    app = web.Application()
    setup_routes(app)
    return app

#create app for using ws
#async def create_app():
#    app = web.Application()
#    fernet_key = fernet.Fernet.generate_key()
#    secret_key = base64.urlsafe_b64decode(fernet_key)
#    setup(app, EncryptedCookieStorage(secret_key))
#    setup_routes(app)
#    app.wslist = []
#    return app
[/app/app.py]

[/app/routes.py]
from .api import http, websocket
import credentials as crs


def setup_routes(app):
    app.router.add_route('GET', f'/test_get', http.get_api.test_get.test_json)
    app.router.add_route('POST', f'/test_post', http.post_api.test_post.test_json)
[/app/routes.py]

[/app/api/__init__.py]
from . import http, websocket
[/app/api/__init__.py]

[/app/api/http/__init__.py]
from . import get_api, post_api, http_response
[/app/api/http/__init__.py]

[/app/api/websocket/__init__.py]
from . import ws_response
[/app/api/websocket/__init__.py]

[/app/api/http/get_api/__init__.py]
from . import test_get
[/app/api/http/get_api/__init__.py]

[/app/api/http/post_api/__init__.py]
from . import test_post
[/app/api/http/post_api/__init__.py]

[/app/api/http/get_api/test_get.py]
from app.sql.sql_handler import sql_exec as handle
from aiohttp import web
import json
from network import base_request, TypeRequest


async def test_json(request):
    headers = {'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Origin': request.headers['Origin']}
    if request.method == 'GET':
        response_msg = {}

        response_msg['msg'] = 'test'
        response_msg['method'] = 'get'
        return web.json_response(response_msg, headers=headers)
[/app/api/http/get_api/test_get.py]

[/app/api/http/post_api/test_post.py]
from app.sql.sql_handler import sql_exec as handle
from aiohttp import web
import json
from network import base_request, TypeRequest


async def test_json(request):
    headers = {'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Origin': request.headers['Origin']}
    if request.method == 'POST':
        response_msg = {}

        response_msg['msg'] = 'test'
        response_msg['method'] = 'post'
        return web.json_response(response_msg, headers=headers)
[/app/api/http/post_api/test_post.py]

[/app/api/http/http_response.py]
from app.sql.sql_handler import sql_exec as handle
from aiohttp import web
import json


async def test(request):
    headers = {'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Origin': request.headers['Origin']}
    response = f'<div>test</div>'
    return web.Response(body=response, headers=headers)
[/app/api/http/http_response.py]

[/app/api/websocket/websocket_response.py]
from aiohttp import web, WSMsgType
import json, asyncio


async def broadcast(request, msg):
    # while True:
    for ws in request.app.wslist:
        await ws.send_str(msg)
    # await asyncio.sleep(10)

async def websocket_handler(request):

    ws = web.WebSocketResponse()
    await ws.prepare(request)
    print(request.url)
    request.app.wslist.append(ws)
    print(request.app.wslist)
    async for msg in ws:
        print(msg)
        if msg.type == WSMsgType.TEXT:
            if msg.data == 'close':
                await ws.close()
            else:
                print(msg.data)
                #await broadcast(request, tmp_val)
                await ws.send_str(msg.data + '/answer')
        elif msg.type == WSMsgType.ERROR:
            print('ws connection closed with exception %s' %
                  ws.exception())

    print('websocket connection closed')
    print(ws)
    return ws
[/app/api/websocket/websocket_response.py]

[/app/sql/sql_handler.py]
async def sql_exec(query, **kwargs):
    """
    Function to handle sql queries
    :param query: string key query
    :param kwargs: dict any kwargs
    :return: bool, json
    """
    pass
[/app/sql/sql_handler.py]

[/app/sql/sql_queries.py]

[/app/sql/sql_queries.py]

[/logger.py]
import logging
import logging.config
import os


def init_logger():
    """
    Инициализция логера
    :return:
    """
    if os.path.exists("logs"):
        pass
    else:
        os.mkdir("logs")
    logging.config.fileConfig('logger.conf')
    print("Init loggers")
    return logging.getLogger("infoLogger"), logging.getLogger("errorLogger")


def generate_message(prefix_msg: str, msg: str, **kwargs):
    """
    Генерация сообщения лога для журнала
    :param prefix_msg: str
    :param msg: str
    :param kwargs: dict
    :return: str
    """
    msg = f"{prefix_msg}: {msg}\n"
    if kwargs:
        # print(kwargs)
        msg += f"Additional info:"
        for key, value in kwargs.items():
            msg += f"\n{key}: {value}"
    return msg


info_logger, traceback_logger = init_logger()
[/logger.py]

[/logger.conf]
[loggers]
keys=root,infoLogger,errorLogger

[handlers]
keys=fileInfoHandler,fileErrorHandler,consoleHandler

[formatters]
keys=myFormatter

[logger_root]
level=CRITICAL
handlers=consoleHandler

[logger_infoLogger]
level=INFO
handlers=fileInfoHandler
qualname=infoLogger

[logger_errorLogger]
level=ERROR
handlers=fileErrorHandler
qualname=errorLogger

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=myFormatter
args=(sys.stdout,)

[handler_fileInfoHandler]
class=FileHandler
formatter=myFormatter
args=("logs/info.log",)

[handler_fileErrorHandler]
class=FileHandler
formatter=myFormatter
args=("logs/error.log",)

[formatter_myFormatter]
format=%(asctime)s - %(name)s - %(filename)s - %(levelname)s - %(message)s
datefmt=
[/logger.conf]

[/network.py]
import requests
import logger
import credentials
from enum import Enum


class TypeRequest(Enum):
    GET = 1
    POST = 2
    PUT = 3
    DELETE = 4


class BaseRequest:
    def __init__(self, host, headers):
        """
        Класс запросов
        :param host: str
        :param headers: dict
        """
        self.host = host
        self.headers = headers

    def send_request(self, api_url: str, request_type: TypeRequest, headers: dict = None, body: dict = None,
                     query_params: dict = None):
        """
        Общая функция отправки запроса
        :param api_url: str
        :param request_type: enum
        :param headers: dict
        :param body: dict
        :param query_params: dict
        :return: request.Response
        """
        if headers is not None:
            for key, value in self.headers.items():
                headers[key] = value
        else:
            headers = self.headers

        url = f"{self.host}/{api_url}"
        response = None
        try:
            logger.info_logger.info(
                logger.generate_message(f"{request_type.name} request",
                                        f"Запрос к {url}\n"
                                        f"Параметры запроса: {query_params}\n"
                                        f"Тело запроса: {body}"))
            if request_type.GET:
                response = requests.get(url, headers=headers, params=query_params)
            elif request_type.POST:
                response = requests.post(url, headers=headers, body=body)
            if response.status_code == 200:
                logger.info_logger.info(
                    logger.generate_message(f"{request_type.name} request",
                                            f"Запрос к {url} успешно завершен. Код статус: {response.status_code}",
                                            headers=response.headers))
            else:
                logger.info_logger.warning(
                    logger.generate_message(f"{request_type.name} request", f"Запрос к {url} завершен, но ответ "
                                            f"не был получен из-за ошибки. Код статуса ошибки: {response.status_code}",
                                            headers=response.headers))
        except requests.exceptions.ConnectionError as err:
            logger.info_logger.error(
                logger.generate_message(f"{request_type.name} request",
                                        f"{err}\n"
                                        f"Запрос к {url} не смог получить ответа. Код статус: {500}"))"
        except TimeoutError as e:
            logger.info_logger.error(
                logger.generate_message(f"{request_type.name} request",
                                        f"{e}\n"
                                        f"Запрос к {url} не смог получить ответа. Код статус: {500}"))"
        except Exception as exception:
            logger.traceback_logger.critical(exception, exc_info=True)
        return response


base_request = BaseRequest(credentials.HOST_API_URL, {"Authorization": credentials.AUTH_HEADER})
[/network.py]